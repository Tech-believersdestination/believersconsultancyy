# Generated by Django 5.2.4 on 2025-07-30 10:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClosingRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.CharField(max_length=20)),
                ('institute', models.CharField(max_length=255)),
                ('course', models.CharField(max_length=255)),
                ('category', models.CharField(max_length=50)),
                ('closing_rank', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CollegeCutoff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.CharField(max_length=20)),
                ('ai_rank', models.IntegerField()),
                ('state', models.CharField(max_length=100)),
                ('institute', models.CharField(max_length=255)),
                ('course', models.CharField(max_length=255)),
                ('quota', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CollegeDatabase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college_name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('ownership', models.CharField(max_length=50)),
                ('is_aiims', models.BooleanField(default=False)),
                ('college_type', models.CharField(choices=[('UG', 'Undergraduate'), ('PG', 'Postgraduate')], max_length=2)),
                ('course', models.CharField(max_length=255)),
                ('seat_type', models.CharField(blank=True, max_length=100)),
                ('closing_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('total_seats', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='FAQCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='INICETAllotment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.CharField(max_length=20)),
                ('ai_rank', models.PositiveIntegerField()),
                ('state', models.CharField(max_length=100)),
                ('institute', models.CharField(max_length=255)),
                ('course', models.CharField(max_length=255)),
                ('quota', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCollege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=50)),
                ('ownership', models.CharField(blank=True, max_length=50)),
                ('courses_offered', models.CharField(blank=True, max_length=255)),
                ('total_seats', models.IntegerField(blank=True, null=True)),
                ('ranking', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NIRFUniversityRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('university_name', models.CharField(max_length=255)),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('city', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PGFeeDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institute', models.CharField(max_length=255)),
                ('course', models.CharField(max_length=255)),
                ('annual_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('stipend', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bond_years', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='PrivateCollege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=100)),
                ('ownership', models.CharField(max_length=50)),
                ('course_offered', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='RankPredictionCollege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college_name', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('course', models.CharField(max_length=255)),
                ('ownership', models.CharField(max_length=50)),
                ('is_aiims', models.BooleanField(default=False)),
                ('seat_type', models.CharField(blank=True, max_length=100)),
                ('closing_rank', models.PositiveIntegerField()),
                ('total_seats', models.PositiveIntegerField()),
                ('intake_year', models.PositiveIntegerField(default=2025)),
            ],
        ),
        migrations.CreateModel(
            name='UGSeatMatrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(max_length=100)),
                ('institute', models.CharField(max_length=255)),
                ('course', models.CharField(max_length=255)),
                ('total_seats', models.PositiveIntegerField()),
                ('category', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('neet_rank', models.CharField(blank=True, max_length=20)),
                ('category', models.CharField(blank=True, max_length=20)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CollegeChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college_name', models.CharField(max_length=255)),
                ('course_name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=100)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='core.faqcategory')),
            ],
        ),
    ]
